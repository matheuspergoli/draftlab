generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  role          Role      @default(USER)
  isBanned      Boolean   @default(false)

  avatar   Media?  @relation("userAvatar", fields: [avatarId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  avatarId String?

  accounts Account[]
  sessions Session[]

  sites Site[]
  posts Post[]
}

model Site {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(32)
  description String  @db.VarChar(140)
  font        String? @default("font-inter")
  message404  String? @default("Ops, parece que você se aventurou em território desconhecido.") @db.VarChar(140)
  subdomain   String  @unique @db.VarChar(32)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thumbnail   Media?  @relation("siteThumbnail", fields: [thumbnailId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  thumbnailId String?

  logo   Media?  @relation("siteLogo", fields: [logoId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  logoId String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  posts   Post[]
  reports Report[]

  @@index([userId])
}

model Post {
  id          String  @id @default(cuid())
  title       String  @db.VarChar(128)
  description String  @db.VarChar(255)
  content     Json
  slug        String? @unique @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Media?  @relation("postImage", fields: [imageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  imageId String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  site   Site?   @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId String?

  @@index([userId])
  @@index([siteId])
}

model Media {
  id   String  @id @default(cuid())
  url  String? @default("https://placehold.co/600x600/png?text=Image+Placeholder&font=roboto")
  path String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userAvatar    User[]   @relation("userAvatar")
  siteThumbnail Site[]   @relation("siteThumbnail")
  siteLogo      Site[]   @relation("siteLogo")
  postImage     Post[]   @relation("postImage")
  reportImage   Report[] @relation("reportImage")
}

model Report {
  id     String  @id @default(cuid())
  userIp String
  reason String
  status Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  site   Site?   @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId String?

  image   Media?  @relation("reportImage", fields: [imageId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  imageId String?
}
